#module "nuget:?package=Cake.DotNetTool.Module&version=0.2.0"
#load "nuget:?package=Cake.Recipe&version=1.0.0"
#load ".build/coverlet.cake"
#load ".build/codecov.cake"

Environment.SetVariableNames();

BuildParameters.SetParameters(context: Context,
                              buildSystem: BuildSystem,
                              sourceDirectoryPath: "./Source",
                              solutionFilePath: "./Source/Codecov.sln",
                              title: "Codecov-exe",
                              repositoryOwner: "codecov",
                              repositoryName: "codecov-exe",
                              appVeyorAccountName: "admiringworm",
                              shouldRunCodecov: true,
                              shouldRunGitVersion: true,
                              shouldExecuteGitLink: false);

BuildParameters.PrintParameters(Context);

ToolSettings.SetToolSettings(context: Context,
                             dupFinderExcludePattern: new string[] {
                                 BuildParameters.RootDirectoryPath + "/Source/*.Tests/**/*.cs"
                             },
                             dupFinderExcludeFilesByStartingCommentSubstring: new string[] {
                                 "<auto-generated>"
                             },
                             testCoverageFilter: "+[codecov*]* -[*.Tests]*",
                             testCoverageExcludeByAttribute: "*.ExcludeFromCodeCoverage",
                             testCoverageExcludeByFile: "*Designer.cs;*.g.cs;*.g.i.cs"
);

// We want to do our own publishing of Codecov-exe

var publishDirectory = BuildParameters.Paths.Directories.PublishedApplications + "/Codecov/publish";

Task("DotNetCore-Publish")
    .IsDependentOn("DotNetCore-Test")
    .Does(() =>
{
    var msBuildSettings = new DotNetCoreMSBuildSettings()
        .WithProperty("Version", BuildParameters.Version.SemVersion)
        .WithProperty("AssemblyVersion", BuildParameters.Version.Version)
        .WithProperty("FileVersion", BuildParameters.Version.Version)
        .WithProperty("AssemblyInformationalVersion", BuildParameters.Version.InformationalVersion);

    DotNetCorePack(BuildParameters.SourceDirectoryPath + "/Codecov.Tool", new DotNetCorePackSettings
    {
        Configuration = BuildParameters.Configuration,
        NoBuild = true,
        NoRestore = true,
        OutputDirectory = BuildParameters.Paths.Directories.NuGetPackages,
        MSBuildSettings = msBuildSettings,
    });

    var project = ParseProject(BuildParameters.SourceDirectoryPath + "/Codecov/Codecov.csproj", BuildParameters.Configuration);
    var runtimeIdentifiers = project.NetCore.RuntimeIdentifiers;
    EnsureDirectoryExists(BuildParameters.Paths.Directories.Build);

    foreach (var runtime in runtimeIdentifiers) {
        msBuildSettings = msBuildSettings
            .WithProperty("PublishSingleFile", "true")
            .WithProperty("PublishTrimmed", "true");
        var outputDirectory = publishDirectory + "/" + runtime;
        string warpOutputBase = BuildParameters.Paths.Directories.Build + "/codecov-";
        if (runtime.StartsWith("win"))
        {
            warpOutputBase += "windows-x64.exe";
        }
        else if (runtime.StartsWith("osx"))
        {
            warpOutputBase += "osx-x64";
        }
        else
        {
            warpOutputBase += "linux-x64";
        }

        DotNetCorePublish(project.ProjectFilePath.FullPath, new DotNetCorePublishSettings {
            Runtime = runtime,
            SelfContained = true,
            OutputDirectory = outputDirectory,
            MSBuildSettings = msBuildSettings
        });

        var files = GetFiles(outputDirectory + "/codecov*");
        foreach (var file in files)
        {
            if (file.GetExtension() != ".pdb")
            {
                CopyFile(file, warpOutputBase);
            }
        }
    }
});

Task("Create-ZipArchive")
    .IsDependentOn("DotNetCore-Publish")
    .Does(() =>
{
    var outputBase = BuildParameters.Paths.Directories.Build + "/codecov-";

    foreach (var directory in GetDirectories(publishDirectory + "/*")) {
        var dirName = directory.GetDirectoryName();
        Zip(directory, outputBase + dirName + ".zip");
    }
});

BuildParameters.Tasks.CreateChocolateyPackagesTask.IsDependentOn("Create-ZipArchive");
BuildParameters.Tasks.CreateNuGetPackagesTask.IsDependentOn("DotNetCore-Publish");

BuildParameters.Tasks.UploadAppVeyorArtifactsTask.Does(() =>
{
    foreach (var archive in GetFiles(BuildParameters.Paths.Directories.Build + "/codecov-*"))
    {
        AppVeyor.UploadArtifact(archive);
    }
});

// We'll need to remove the chocolatey package before trying to publish the github releases
Task("Remove-Unneeded Github Releases")
	.IsDependentOn("Publish-Chocolatey-Packages")
    .WithCriteria(() => BuildParameters.ShouldPublishGitHub)
    .Does(() =>
{
    DeleteFiles(BuildParameters.Paths.Directories.ChocolateyPackages + "/*");
});

BuildParameters.Tasks.PublishGitHubReleaseTask.IsDependentOn("Remove-Unneeded Github Releases");
BuildParameters.Tasks.PublishGitHubReleaseTask.Does(() => RequireTool(GitReleaseManagerTool, () =>
{
    if (BuildParameters.CanUseGitReleaseManager)
    {
        foreach (var archive in GetFiles(BuildParameters.Paths.Directories.Build + "/codecov-*"))
        {
            GitReleaseManagerAddAssets(BuildParameters.GitHub.UserName, BuildParameters.GitHub.Password, BuildParameters.RepositoryOwner, BuildParameters.RepositoryName, BuildParameters.Version.Milestone, archive.ToString());
        }
    }
}));

BuildParameters.Tasks.CleanTask.Does(() =>
{
    if (DirectoryExists("./tools/.store/codecov.tool")) {
        DeleteDirectory("./tools/.store/codecov.tool", new DeleteDirectorySettings {
            Recursive = true,
            Force     = true
        });
    }

    DeleteFiles(GetFiles("./tools/codecov*"));
});

Task("Update-Dependencies")
    .Does(() =>
{
    var dotnetTool = Context.Tools.Resolve("dotnet.exe");
    if (dotnetTool == null) {
        dotnetTool = Context.Tools.Resolve("dotnet");
    }
    foreach (var project in ParseSolution(BuildParameters.SolutionFilePath).GetProjects()) {
        var parsedProject = ParseProject(project.Path, BuildParameters.Configuration);
        foreach (var package in parsedProject.PackageReferences.Select(x => x.Name)) {
            StartProcess(dotnetTool, new ProcessSettings()
                .WithArguments(builder =>
                    builder.Append("add")
                           .AppendQuoted(project.Path.FullPath)
                           .Append("package")
                           .AppendQuoted(package)));
        }
    }
}
);

// Enable drafting a release when running on the master branch
if (BuildParameters.IsRunningOnAppVeyor &&
    BuildParameters.IsMainRepository && BuildParameters.IsMasterBranch && !BuildParameters.IsTagged)
{
    BuildParameters.Tasks.AppVeyorTask.IsDependentOn("Create-Release-Notes");
}

BuildParameters.PrintParameters(Context);
Build.RunDotNetCore();
